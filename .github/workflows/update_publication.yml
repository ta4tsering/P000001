name: Create Release
on: 
  push:
    branches:
      - base-update-review
jobs:
  release-project:
    name: Create the publication
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: base-update-review
          
      - name: Configure git
        uses: dawidd6/action-git-user-config@v1
        with:
          # Defaults to $GITHUB_ACTOR if not specified
          username: ta4tsering
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}  
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython openpecha PyYAML PyGithub subprocess.run pathlib
      - name: run python script
        env:
          SECRET: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os 
          import yaml
          import subprocess
          from pathlib import Path
          from openpecha.serializers import HFMLSerializer
          from github import Github
          from git import Repo
          
          config = {
              "OP_ORG": "https://github.com/ta4tsering"
          }
          
          def commit(repo, message, not_includes=[], branch="publication"):
              has_changed = False
              for fn in repo.untracked_files:
                  ignored = False
                  for not_include_fn in not_includes:
                      if not_include_fn in fn:
                          ignored = True
                  if ignored:
                      continue
                  if fn:
                      repo.git.add(fn)
                  if has_changed is False:
                      has_changed = True
              if repo.is_dirty() is True:
                  for fn in repo.git.diff(None, name_only=True).split("\n"):
                      if fn:
                          repo.git.add(fn)
                      if has_changed is False:
                          has_changed = True
                  if has_changed is True:
                      if not message:
                          message = "Initial commit"
                      repo.git.commit("-m", message)
                      repo.git.push("origin", "HEAD:publication")
                      
          def setup_auth(repo, org, token):
              remote_url = repo.remote().url
              old_url = remote_url.split("//")
              authed_remote_url = f"{old_url[0]}//{org}:{token}@{old_url[1]}"
              repo.remote().set_url(authed_remote_url)
              
          def write_hfml_text(repo, pecha_path, hfml_texts, meta_info):
              for _, vol in enumerate(hfml_texts,1):
                  vol_num = vol[1:]
                  content = hfml_texts[f'v{vol_num}']
                  file_name = meta_info[f"v{vol_num}"]['title']
                  Path(f"{pecha_path}/{file_name}.txt").write_text(content, encoding='utf-8')
                  print(f"{file_name} is done")
                  
          def pull_branch(pecha_path):
              subprocess.run(f'cd {pecha_path}/; git pull --rebase origin publication', shell=True)
              
          def get_hfml(opf_path):
              serializer = HFMLSerializer(opf_path, layers=["Pagination"])
              serializer.apply_layers()
              results = serializer.get_result()
              return results
              
          def get_meta_info(pecha_path, pecha_id):
              cur_text = {}
              meta_info = {}
              meta_yml = Path(f"{pecha_path}/{pecha_id}.opf/meta.yml").read_text(encoding='utf-8')
              meta_data = yaml.safe_load(meta_yml)
              volumes = meta_data['source_metadata']['volumes']
              for _, vol_info in volumes.items():
                  vol_num = vol_info['base_file'][:-4]
                  title = vol_info['title']
                  cur_text[vol_num] = { 
                      'title': title,
                  }
                  meta_info.update(cur_text)
                  cur_text = {}
              return meta_info
              
          def get_branch(repo, branch):
              if branch in repo.heads:
                  return branch
              return "master"
              
          def download_pecha(pecha_id, out_path=None, branch="base-update-review"):
              pecha_url = f"{config['OP_ORG']}/{pecha_id}.git"
              out_path = Path(out_path)
              out_path.mkdir(exist_ok=True, parents=True)
              pecha_path = out_path / pecha_id
              Repo.clone_from(pecha_url, str(pecha_path))
              repo = Repo(str(pecha_path))
              branch_to_pull = get_branch(repo, branch)
              repo.git.checkout(branch_to_pull)
              print(f"{pecha_id} Downloaded ")
              return pecha_path  
              
          if __name__=='__main__':
              token = os.environ.get('SECRET')
              g = Github(token)
              commit_msg = "updated pulication from base-update-review"
              headers = {"Authorization": f"bearer {token}"}
              file_path = './'
              pecha_id = "P000001"
              pecha_path = download_pecha(pecha_id, file_path)
              meta_info = get_meta_info(pecha_path, pecha_id)
              hfml_text = get_hfml(f"{pecha_path}/{pecha_id}.opf/")
              pull_branch(pecha_path)
              repo = Repo(pecha_path)
              write_hfml_text(repo, pecha_path, hfml_text, meta_info)
              setup_auth(repo, "ta4tsering", token)
              commit(repo, commit_msg, branch="publication")
        shell: python
